layout: post
title: Tracing in Elixir
category: Programming
tag: Coding
tags:
      - Elixir
content: |

  Before I forget.

      Interactive Elixir (1.3.1) - press Ctrl+C to exit (type h() ENTER for help)
      iex(1)> defmodule A do
      ...(1)> def c(a) do
      ...(1)> a * a * a
      ...(1)> end
      ...(1)> end
      {:module, A,
       <<70, 79, 82, 49, 0, 0, 4, 196, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 142,
         131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115,
         95, 118, 49, 108, 0, 0, 0, 4, 104, 2, ...>>, {:c, 1}}
      iex(2)> :dbg.start
      {:ok, #PID<0.67.0>}
      iex(3)> :dbg.tracer
      {:ok, #PID<0.67.0>}
      iex(4)> :dbg.tpl(A, :c, [{:_, [], [{:return_trace}]}])
      {:ok, [{:matched, :nonode@nohost, 1}, {:saved, 1}]}
      iex(5)> :dbg.p(:all, :call)
      {:ok, [{:matched, :nonode@nohost, 43}]}
      iex(6)> A.c(3)
      (<0.56.0>) call 'Elixir.A':c(3)
      (<0.56.0>) returned from 'Elixir.A':c/1 -> 27
      27
      iex(7)> A.c(3)
      (<0.56.0>) call 'Elixir.A':c(3)
      (<0.56.0>) returned from 'Elixir.A':c/1 -> 27
      27
      iex(8)> A.c(3334)
      (<0.56.0>) call 'Elixir.A':c(3334)
      (<0.56.0>) returned from 'Elixir.A':c/1 -> 37059263704
      37059263704

  Start `dbg` with

      :dbg.start
      :dbg.tracer

  Stop `dbg` with

      :dbg.stop_clear

  `stop_clear` stops dbg and also clears all trace patterns.
